
//////////////////////////////////////////////////////////////////////////

// Map{{ .Index }} is a helper for mapping {{ .NumberStr }} components.
//
// # Example
//
//	world := ecs.NewWorld()
//
//	mapper := NewMap{{ .Index }}{{ .Types }}(&world)
//
//	entity := mapper.NewEntity()
//	{{ .Variables }} := mapper.Get(entity)
type Map{{ .Index }}{{ .TypesFull }} struct {
	world *ecs.World
	mask ecs.Mask
	relation int8
	ids []ecs.ID
	{{ .IDTypes }}
}

// NewMap{{ .Index }} creates a new Map{{ .Index }} object.
//
// The optional argument can be used to set an [ecs.Relation] component type.
func NewMap{{ .Index }}{{ .TypesFull }}(w *ecs.World, relation ...Comp) Map{{ .Index }}{{ .Types }} {
	m := Map{{ .Index }}{{ .Types }}{
		world: w,
		{{ .IDAssign }}
	}
	m.ids = []ecs.ID{ {{ .IDList }} }
	m.mask = ecs.All(m.ids...)
	m.relation = -1
	if len(relation) > 0 {
		m.relation = int8(ecs.TypeID(w, relation[0]))
	}
	return m
}

// Get all the Map{{ .Index }}'s components for the given entity.
//
// See [Map{{ .Index }}.GetUnchecked] for an optimized version for static entities.
// See also [ecs.World.Get].
func (m *Map{{ .Index }}{{ .Types }}) Get(entity ecs.Entity) ({{ .TypesReturn }}) {
	return {{ .ReturnAllSafe }}
}

// GetUnchecked all the Map{{ .Index }}'s components for the given entity.
//
// GetUnchecked is an optimized version of [Map{{ .Index }}.Get],
// for cases where entities are static or checked with [ecs.World.Alive] in user code.
//
// See also [ecs.World.GetUnchecked].
func (m *Map{{ .Index }}{{ .Types }}) GetUnchecked(entity ecs.Entity) ({{ .TypesReturn }}) {
	return {{ .ReturnAll }}
}

// New creates a new [ecs.Entity] with the Map{{ .Index }}'s components.
//
// The optional argument can be used to set the target [ecs.Entity] for the Map{{ .Index }}'s [ecs.Relation].
//
// See also [ecs.World.NewEntity].
func (m *Map{{ .Index }}{{ .Types }}) New(target ...ecs.Entity) ecs.Entity {
	return newEntity(m.world, m.ids, m.relation, target...)
}

// NewBatch creates entities with the Map{{ .Index }}'s components.
//
// The optional argument can be used to set the target [ecs.Entity] for the Map{{ .Index }}'s [ecs.Relation].
//
// See also [Map{{ .Index }}.NewQuery] and [ecs.Batch.NewBatch].
func (m *Map{{ .Index }}{{ .Types }}) NewBatch(count int, target ...ecs.Entity) {
	newBatch(m.world, count, m.ids, m.relation, target...)
}

// NewQuery creates entities with the Map{{ .Index }}'s components.
// It returns a [Query{{ .Index }}] over the new entities.
//
// The optional argument can be used to set the target [ecs.Entity] for the Map{{ .Index }}'s [ecs.Relation].
//
// Listener notification is delayed until the query is closed of fully iterated.
//
// See also [Map{{ .Index }}.NewBatch] and [ecs.Builder.NewQuery].
func (m *Map{{ .Index }}{{ .Types }}) NewQuery(count int, target ...ecs.Entity) Query{{ .Index }}{{ .Types }} {
	query := newQuery(m.world, count, m.ids, m.relation, target...)
	return Query{{ .Index }}{{ .Types }}{
		Query: query,
		{{ .IDAssign2 }}
	}
}

{{if .ReturnAll}}
// NewWith creates a new [ecs.Entity] with the Map{{ .Index }}'s components, using the supplied values.
//
// The optional argument can be used to set the target [ecs.Entity] for the Map{{ .Index }}'s [ecs.Relation].
//
// See also [ecs.NewBuilderWith].
func (m *Map{{ .Index }}{{ .Types }}) NewWith({{ .Arguments }}, target ...ecs.Entity) ecs.Entity {
	if len(target) == 0 {
		return m.world.NewEntityWith({{ .Components }})
	}
	if m.relation < 0 {
		panic("map has no relation defined")
	}
	return ecs.NewBuilderWith(m.world, {{ .Components }}).WithRelation(uint8(m.relation)).New(target[0])
}

// Add the Map{{ .Index }}'s components to the given entity.
//
// See also [ecs.World.Add].
func (m *Map{{ .Index }}{{ .Types }}) Add(entity ecs.Entity) {
	m.world.Add(entity, m.ids...)
}

// Assign the Map{{ .Index }}'s components to the given entity, using the supplied values.
//
// See also [ecs.World.Assign].
func (m *Map{{ .Index }}{{ .Types }}) Assign(entity ecs.Entity, {{ .Arguments }}) {
	m.world.Assign(entity,
		{{ .Components }}
	)
}
{{ end }}

// Remove the Map{{ .Index }}'s components from the given entity.
//
// See also [ecs.World.Remove].
func (m *Map{{ .Index }}{{ .Types }}) Remove(entity ecs.Entity) {
	m.world.Remove(entity, m.ids...)
}


// RemoveEntities removes all entities from the world that match the Map{{ .Index }}'s components.
//
// The argument determines whether to match the components exactly (i.e. no other components are allowed),
// or to use a simple filter that does not restrict further components.
//
// Returns the number of removed entities.
//
// See also [ecs.World.NewEntityWith].
func (m *Map{{ .Index }}{{ .Types }}) RemoveEntities(exclusive bool) int {
	if exclusive {
		filter := m.mask.Exclusive()
		return m.world.Batch().RemoveEntities(&filter)
	}
	return m.world.Batch().RemoveEntities(m.mask)
}