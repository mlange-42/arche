
//////////////////////////////////////////////////////////////////////////

// Map{{ .Index }} is a helper for mapping {{ .NumberStr }} components.
//
// # Example
//
//	world := ecs.NewWorld()
//
//	mapper := NewMap{{ .Index }}{{ .Types }}(&world)
//
//	entity := mapper.NewEntity()
//	{{ .Variables }} := mapper.Get(entity)
type Map{{ .Index }}{{ .TypesFull }} struct {
	world *ecs.World
	mask ecs.Mask
	ids []ecs.ID
	{{ .IDTypes }}
}

// NewMap{{ .Index }} creates a new Map{{ .Index }} object.
func NewMap{{ .Index }}{{ .TypesFull }}(w *ecs.World) Map{{ .Index }}{{ .Types }} {
	m := Map{{ .Index }}{{ .Types }}{
		world: w,
		{{ .IDAssign }}
	}
	m.ids = []ecs.ID{ {{ .IDList }} }
	m.mask = ecs.All(m.ids...)
	return m
}

// Get all the Map{{ .Index }}'s components for the given entity.
//
// See [Map{{ .Index }}.GetUnchecked] for an optimized version for static entities.
// See also [ecs.World.Get].
func (m *Map{{ .Index }}{{ .Types }}) Get(entity ecs.Entity) ({{ .TypesReturn }}) {
	return {{ .ReturnAllSafe }}
}

// GetUnchecked all the Map{{ .Index }}'s components for the given entity.
//
// GetUnchecked is an optimized version of [Map{{ .Index }}.Get],
// for cases where entities are static or checked with [ecs.World.Alive] in user code.
//
// See also [ecs.World.GetUnchecked].
func (m *Map{{ .Index }}{{ .Types }}) GetUnchecked(entity ecs.Entity) ({{ .TypesReturn }}) {
	return {{ .ReturnAll }}
}

// NewEntity creates a new [ecs.Entity] with the Map{{ .Index }}'s components.
//
// See also [ecs.World.NewEntity].
func (m *Map{{ .Index }}{{ .Types }}) NewEntity() ecs.Entity {
	entity := m.world.NewEntity(m.ids...)
	return entity
}

// NewEntities creates entities with the Map{{ .Index }}'s components.
//
// See also [Map{{ .Index }}.NewEntitiesQuery] and [ecs.Batch.NewEntities].
func (m *Map{{ .Index }}{{ .Types }}) NewEntities(count int) {
	ecs.NewBuilder(m.world, m.ids...).Batch(count)
}

// NewEntities creates entities with the Map{{ .Index }}'s components.
// It returns a [Query{{ .Index }}] over the new entities.
//
// Listener notification is delayed until the query is closed of fully iterated.
//
// See also [Map{{ .Index }}.NewEntities] and [ecs.Batch.NewEntitiesQuery].
func (m *Map{{ .Index }}{{ .Types }}) NewEntitiesQuery(count int) Query{{ .Index }}{{ .Types }} {
	query := ecs.NewBuilder(m.world, m.ids...).Query(count)
	return Query{{ .Index }}{{ .Types }}{
		Query: query,
		{{ .IDAssign2 }}
	}
}

{{if .ReturnAll}}
// NewEntityWith creates a new [ecs.Entity] with the Map{{ .Index }}'s components, using the supplied values.
//
// See also [ecs.World.NewEntityWith].
func (m *Map{{ .Index }}{{ .Types }}) NewEntityWith({{ .Arguments }}) ecs.Entity {
	entity := ecs.NewBuilderWith(m.world,
		{{ .Components }}
	).Build()
	return entity
}

// NewEntitiesWith creates entities with the Map{{ .Index }}'s components, using the supplied values.
//
// See also [Map{{ .Index }}.NewEntitiesWithQuery] and [ecs.Batch.NewEntitiesWith].
func (m *Map{{ .Index }}{{ .Types }}) NewEntitiesWith(count int, {{ .Arguments }}) {
	ecs.NewBuilderWith(m.world,
		{{ .Components }}
	).Batch(count)
}

// NewEntitiesWithQuery creates entities with the Map{{ .Index }}'s components, using the supplied values.
// It returns a [Query{{ .Index }}] over the new entities.
//
// Listener notification is delayed until the query is closed of fully iterated.
//
// See also [Map{{ .Index }}.NewEntitiesWith] and [ecs.Batch.NewEntitiesWithQuery].
func (m *Map{{ .Index }}{{ .Types }}) NewEntitiesWithQuery(count int, {{ .Arguments }}) Query{{ .Index }}{{ .Types }} {
	query := ecs.NewBuilderWith(m.world,
		{{ .Components }}
	).Query(count)
	return Query{{ .Index }}{{ .Types }}{
		Query: query,
		{{ .IDAssign2 }}
	}
}

// Add the Map{{ .Index }}'s components to the given entity.
//
// See also [ecs.World.Add].
func (m *Map{{ .Index }}{{ .Types }}) Add(entity ecs.Entity) {
	m.world.Add(entity, m.ids...)
}

// Assign the Map{{ .Index }}'s components to the given entity, using the supplied values.
//
// See also [ecs.World.Assign].
func (m *Map{{ .Index }}{{ .Types }}) Assign(entity ecs.Entity, {{ .Arguments }}) {
	m.world.Assign(entity,
		{{ .Components }}
	)
}
{{ end }}

// Remove the Map{{ .Index }}'s components from the given entity.
//
// See also [ecs.World.Remove].
func (m *Map{{ .Index }}{{ .Types }}) Remove(entity ecs.Entity) {
	m.world.Remove(entity, m.ids...)
}


// RemoveEntities removes all entities from the world that match the Map{{ .Index }}'s components.
//
// The argument determines whether to match the components exactly (i.e. no other components are allowed),
// or to use a simple filter that does not restrict further components.
//
// Returns the number of removed entities.
//
// See also [ecs.World.NewEntityWith].
func (m *Map{{ .Index }}{{ .Types }}) RemoveEntities(exclusive bool) int {
	if exclusive {
		filter := m.mask.Exclusive()
		return m.world.RemoveEntities(&filter)
	}
	return m.world.RemoveEntities(m.mask)
}