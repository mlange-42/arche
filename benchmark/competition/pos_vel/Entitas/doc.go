// ////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2021 Vladislav Fedotov (Falldot)
// License: MIT License
// MIT License web page: https://opensource.org/licenses/MIT
//
// ////////////////////////////////////////////////////////////////////////
//
// This file generated by Entitas-Go generator. PLEASE DO NOT EDIT IT.
//
// Entitas-Go: github.com/Falldot/Entitas-Go
//
// ////////////////////////////////////////////////////////////////////////
package ecs

const docComponentTotal = 2

const (
	Position = iota
	Velocity //next
)

// Package posvel benchmarks the basic position/velocity example
//
// Setup:
//   - 1000 entities with PositionComponent{f64, f64} and VelocityComponent{f64, f64}
//   - 9000 entities with PositionComponent{f64, f64}
//
// Benchmark:
//   - Iterate all entities with PositionComponent and VelocityComponent
//   - Add VelocityComponent to PositionComponent
// posvel

const nPos = 9000
const nPosVel = 1000

// PositionComponent component
type PositionComponent struct {
	X float64
	Y float64
}

// VelocityComponent component
type VelocityComponent struct {
	X float64
	Y float64
}

func (e *Entity) AddPosition(x float64, y float64) {
	var c *PositionComponent
	if comp, ok := e.Create(Position); ok {
		c = comp.(*PositionComponent)
	} else {
		c = new(PositionComponent)
	}
	c.X = x
	c.Y = y

	e.components[Position] = c
	e.onComponentAdd.Execute(e, Position, c)
}

func (e *Entity) ReplacePosition(x float64, y float64) {
	if e.components[Position] != nil {
		c := e.components[Position].(*PositionComponent)
		c.X = x
		c.Y = y

		e.onComponentReplace.Execute(e, Position, c)
	} else {
		e.AddPosition(x, y)
	}
}

func (e *Entity) OnPosition() {
	e.onComponentAdd.Execute(e, Position, e.components[Position])
}

func (e *Entity) OffPosition() {
	e.onComponentOff.Execute(e, Position, e.components[Position])
}

func (e *Entity) RemovePosition() {
	e.onComponentRemove.Execute(e, Position, e.components[Position])
}

func (e *Entity) GetPosition() *PositionComponent {
	return e.components[Position].(*PositionComponent)
}

func (e *Entity) AddVelocity(y float64, x float64) {
	var c *VelocityComponent
	if comp, ok := e.Create(Velocity); ok {
		c = comp.(*VelocityComponent)
	} else {
		c = new(VelocityComponent)
	}
	c.Y = y
	c.X = x

	e.components[Velocity] = c
	e.onComponentAdd.Execute(e, Velocity, c)
}

func (e *Entity) ReplaceVelocity(y float64, x float64) {
	if e.components[Velocity] != nil {
		c := e.components[Velocity].(*VelocityComponent)
		c.Y = y
		c.X = x

		e.onComponentReplace.Execute(e, Velocity, c)
	} else {
		e.AddVelocity(y, x)
	}
}

func (e *Entity) OnVelocity() {
	e.onComponentAdd.Execute(e, Velocity, e.components[Velocity])
}

func (e *Entity) OffVelocity() {
	e.onComponentOff.Execute(e, Velocity, e.components[Velocity])
}

func (e *Entity) RemoveVelocity() {
	e.onComponentRemove.Execute(e, Velocity, e.components[Velocity])
}

func (e *Entity) GetVelocity() *VelocityComponent {
	return e.components[Velocity].(*VelocityComponent)
}
